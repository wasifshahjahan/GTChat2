/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var __ = require("underscore");

















var util = require("util");
var utils = require("../../../util/utils");
var insightsUtils = require("./insights.utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;
  var insightsAlertsRulesCommand = cli.category("insights").category("alerts").category("rule").description($("Manages alerts rules"));



  insightsAlertsRulesCommand.command("list <resourceGroup>").description($("List alert rules for a resource.")).usage("[options] <resourceGroup>").option("-g --resourceGroup <resourceGroup>", $("The resource group.")).option("-n --ruleName <ruleName>", $("The name of the rule to query.")).option("-i --targetResourceId <targetResourceId>", $("The target resource of the query.")).option("-s --subscription <subscription>", $("The subscription identifier.")).execute(function __1(resourceGroup, options, _) { var __frame = { name: "__1", line: 38 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {







      return insightsAlertsRulesCommand._prepareAndExecute(resourceGroup, options, __cb(_, __frame, 1, 33, function __$__1() { _(); }, true)); }); });


  insightsAlertsRulesCommand.command("delete <resourceGroup> <ruleName>").description($("Deletes an alert rule.")).usage("[options] <resourceGroup> <ruleName>").option("-g --resourceGroup <resourceGroup>", $("The resource group.")).option("-n --ruleName <ruleName>", $("The name of the rule to query.")).option("-s --subscription <subscription>", $("The subscription identifier.")).execute(function __2(resourceGroup, ruleName, options, _) { var __frame = { name: "__2", line: 48 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {






      return insightsAlertsRulesCommand._prepareAndExecuteDelete(resourceGroup, ruleName, options, __cb(_, __frame, 1, 33, function __$__2() { _(); }, true)); }); });


  insightsAlertsRulesCommand.command("set <ruleType> <ruleName> <location> <resourceGroup>").description($("Create or set a metric alert rule.")).usage("[options] <ruleType> <ruleName> <location> <resourceGroup>").option("-y --ruleType <ruleType>", $("The type of the rule (Event, Metric, Webtest).")).option("-x --disable", $("Flag to disable the rule.")).option("-s --subscription <subscription>", $("The subscription identifier.")).option("-n --ruleName <ruleName>", $("The name of the rule.")).option("-d --description <description>", $("The description of the rule.")).option("-l --location <location>", $("The location.")).option("-g --resourceGroup <resourceGroup>", $("The resource group.")).option("--windowSize <windowSize>", $("The time window size. Expected format hh:mm:ss.")).option("--sendToServiceOwners", $("Flag to send e-mail to service owners.")).option("--customEmails <customEmails>", $("The list of custom e-mail addresses.")).option("-o --conditionOperator <conditionOperator>", $("The condition operator: GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual. Value is case insensitive.")).option("-a --threshold <threshold>", $("The threshold.")).option("-i --resourceId <resourceId>", $("The resource Id.")).option("-m --metricName <metricName>", $("The metric name.")).option("--timeAggregationOperator <timeAggregationOperator>", $("The time aggregation operator: Average, Minimum, Maximum, Total. Value is case insensitve.")).option("-e --eventName <eventName>", $("The event name.")).option("-z --eventSource <eventSource>", $("The event source.")).option("-f --level <level>", $("The level for the rule.")).option("-p --operationName <operationName>", $("The operation name.")).option("-k --resourceProvider <resourceProvider>", $("The resource provider.")).option("-u --status <status>", $("The status.")).option("-b --subStatus <subStatus>", $("The substatus.")).option("--eMailAddress <eMailAddress>", $("The e-mail address.")).option("-f --failedLocationCount <failedLocationCount>", $("The failed location count.")).execute(function __3(ruleType, ruleName, location, resourceGroup, options, _) { var __frame = { name: "__3", line: 98 }; return __func(_, this, arguments, __3, 5, __frame, function __$__3() {














































      return insightsAlertsRulesCommand._prepareAndExecuteSet(ruleType, ruleName, location, resourceGroup, options, __cb(_, __frame, 1, 33, function __$__3() { _(); }, true)); }); });



  insightsAlertsRulesCommand._prepareAndExecute = function insightsAlertsRulesCommand__prepareAndExecute__4(resourceGroup, options, _) { var client, __this = this; var __frame = { name: "insightsAlertsRulesCommand__prepareAndExecute__4", line: 103 }; return __func(_, this, arguments, insightsAlertsRulesCommand__prepareAndExecute__4, 2, __frame, function __$insightsAlertsRulesCommand__prepareAndExecute__4() {
      if (!__.isString(resourceGroup)) {
        cli.missingArgument("resourceGroup"); } ;


      client = insightsUtils.createInsightsManagementClient(log, options);

      return __this._executeCmd(client, resourceGroup, options.ruleName, options.targetResourceId, options, __cb(_, __frame, 7, 9, function __$insightsAlertsRulesCommand__prepareAndExecute__4() { _(); }, true)); }); };


  insightsAlertsRulesCommand._prepareAndExecuteDelete = function insightsAlertsRulesCommand__prepareAndExecuteDelete__5(resourceGroup, ruleName, options, _) { var client, __this = this; var __frame = { name: "insightsAlertsRulesCommand__prepareAndExecuteDelete__5", line: 113 }; return __func(_, this, arguments, insightsAlertsRulesCommand__prepareAndExecuteDelete__5, 3, __frame, function __$insightsAlertsRulesCommand__prepareAndExecuteDelete__5() {
      if (!__.isString(resourceGroup)) {
        cli.missingArgument("resourceGroup"); } ;


      if (!__.isString(ruleName)) {
        cli.missingArgument("ruleName"); } ;


      client = insightsUtils.createInsightsManagementClient(log, options);

      return __this._executeDeleteCmd(client, resourceGroup, ruleName, options, __cb(_, __frame, 11, 9, function __$insightsAlertsRulesCommand__prepareAndExecuteDelete__5() { _(); }, true)); }); };


  insightsAlertsRulesCommand._prepareAndExecuteSet = function insightsAlertsRulesCommand__prepareAndExecuteSet__6(ruleType, ruleName, location, resourceGroup, options, _) { var client, parameters, __this = this; var __frame = { name: "insightsAlertsRulesCommand__prepareAndExecuteSet__6", line: 127 }; return __func(_, this, arguments, insightsAlertsRulesCommand__prepareAndExecuteSet__6, 5, __frame, function __$insightsAlertsRulesCommand__prepareAndExecuteSet__6() {
      log.silly(ruleType);
      log.silly(ruleName);
      log.silly(location);
      log.silly(resourceGroup);
      log.silly(util.inspect(options));
      if (!__.isString(ruleType)) {
        cli.missingArgument("ruleType"); } ;


      if (!__.isString(ruleName)) {
        cli.missingArgument("ruleName"); } ;


      if (!__.isString(location)) {
        cli.missingArgument("location"); } ;


      if (!__.isString(resourceGroup)) {
        cli.missingArgument("resourceGroup"); } ;


      client = insightsUtils.createInsightsManagementClient(log, options);
      parameters = __this._createSdkCallParameters(ruleType, ruleName, location, resourceGroup, options);

      return __this._executeSetCmd(client, ruleName, resourceGroup, parameters, options, __cb(_, __frame, 25, 9, function __$insightsAlertsRulesCommand__prepareAndExecuteSet__6() { _(); }, true)); }); };


  insightsAlertsRulesCommand._createRuleCondition = function(ruleType, ruleName, location, resourceGroup, options) {
    var windowSize;
    if (options.windowSize) {
      windowSize = insightsUtils.validateTimeSpan(options.windowSize); }
     else {
      windowSize = insightsUtils.defaultWindowSize; } ;


    var condition;
    if ((ruleType === "Event")) {
      condition = this._createEventRuleCondition(resourceGroup, windowSize, options); }
     else if ((ruleType === "Metric")) {
      condition = this._createThresholdRuleCondition(windowSize, options); }
     else if ((ruleType === "Webtest")) {
      condition = this._createLocationThresholdRuleCondition(windowSize, options); }
     else {
      throw new Error(util.format($("Rule type %s not supported."), ruleType)); }   ;


    return condition; };


  insightsAlertsRulesCommand._validateCommonParameters = function(options) {
    if (!__.isString(options.resourceId)) {
      cli.missingArgument("resourceId"); } ;


    if (!__.isString(options.threshold)) {
      cli.missingArgument("threshold"); }
     else {
      options.threshold = parseFloat(options.threshold); } ;


    if (!__.isString(options.conditionOperator)) {
      cli.missingArgument("conditionOperator"); }
     else {
      var operatorTemp = options.conditionOperator.toLowerCase();
      if (((((operatorTemp != "greaterthan") && (operatorTemp != "greaterthanorequal")) && (operatorTemp != "lessthan")) && (operatorTemp != "lessthanorequal"))) {
        throw new Error(util.format($("Invalid condition operator: %s"), options.conditionOperator)); } ; } ; };




  insightsAlertsRulesCommand._createThresholdRuleCondition = function(windowSize, options) {
    this._validateCommonParameters(options);

    if (!__.isString(options.metricName)) {
      cli.missingArgument("metricName"); } ;


    if (!__.isString(options.timeAggregationOperator)) {
      options.timeAggregationOperator = insightsUtils.defaultTimeAggregationOperator; }
     else {
      var tempOperator = options.timeAggregationOperator.toLowerCase();
      if (((((tempOperator != "average") && (tempOperator != "minimum")) && (tempOperator != "maximum")) && (tempOperator != "total"))) {
        throw new Error(util.format($("Invalid time aggregation operator: %s"), options.timeAggregationOperator)); } ; } ;



    return {
      dataSource: {
        metricName: options.metricName,
        resourceUri: options.resourceId,
        type: "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource" },

      operator: options.conditionOperator,
      threshold: options.threshold,
      timeAggregation: options.timeAggregationOperator,
      windowSize: windowSize,
      type: "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition" }; };



  insightsAlertsRulesCommand._createEventRuleCondition = function(resourceGroup, windowSize, options) {
    this._validateCommonParameters(options);

    if (!__.isString(options.eventName)) {
      cli.missingArgument("eventName"); } ;


    if (!__.isString(options.eventSource)) {
      cli.missingArgument("eventSource"); } ;


    if (!__.isString(options.level)) {
      cli.missingArgument("eventSource"); } ;


    if (!__.isString(options.operationName)) {
      cli.missingArgument("operationName"); } ;


    if (!__.isString(options.resourceProvider)) {
      cli.missingArgument("resourceProvider"); } ;


    if (!__.isString(options.status)) {
      cli.missingArgument("status"); } ;


    if (!__.isString(options.subStatus)) {
      cli.missingArgument("subStatus"); } ;


    return {
      aggregation: {
        operator: options.conditionOperator,
        threshold: options.threshold,
        windowSize: windowSize },

      dataSource: {
        eventName: options.eventName,
        eventSource: options.evenSource,
        level: options.level,
        operationName: options.operationName,
        resourceGroupName: resourceGroup,
        resourceProviderName: options.resourceProviderName,
        resourceUri: options.resourceId,
        status: options.status,
        subStatus: options.subStatus,
        claims: {
          eMailAddress: options.eMailAddress },

        type: "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource" },

      type: "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition" }; };



  insightsAlertsRulesCommand._createLocationThresholdRuleCondition = function(windowSize, options) {
    return {
      dataSource: {
        type: "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource" },

      failedLocationCount: options.failedLocationCount,
      windowSize: windowSize,
      type: "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition" }; };



  insightsAlertsRulesCommand._createSdkCallParameters = function(ruleType, ruleName, location, resourceGroup, options) {
    var condition = this._createRuleCondition(ruleType, ruleName, location, resourceGroup, options);
    var parameters = {
      location: location,
      properties: {
        name: ruleName,
        isEnabled: !options.disabled,
        description: options.description,
        lastUpdatedTime: new Date(),
        condition: condition,
        action: {
          customEmails: (__.isUndefined(options.customEmails) ? null : options.customEmails),
          sendToServiceOwners: !__.isUndefined(options.sendToServiceOwners),
          type: "Microsoft.Azure.Management.Insights.Models.RuleEmailAction" } },


      tags: { } };


    parameters.tags["$type"] = "Microsoft.WindowsAzure.Management.Common.Storage.CasePreservedDictionary,Microsoft.WindowsAzure.Management.Common.Storage";
    parameters.tags[("hidden-link:" + options.resourceId)] = "Resource";

    return parameters; };



  insightsAlertsRulesCommand._executeCmd = function insightsAlertsRulesCommand__executeCmd__7(client, resourceGroup, name, targetResourceId, options, _) { var progress, result, response; var __frame = { name: "insightsAlertsRulesCommand__executeCmd__7", line: 321 }; return __func(_, this, arguments, insightsAlertsRulesCommand__executeCmd__7, 5, __frame, function __$insightsAlertsRulesCommand__executeCmd__7() {
      progress = cli.interaction.progress($("Querying for alert rules"));
      result = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$insightsAlertsRulesCommand__executeCmd__7() { return (function __$insightsAlertsRulesCommand__executeCmd__7(__then) {


              if ((!__.isString(name) || (name === ""))) {
                log.silly("Query by resourceGroup or targetResourceId");
                return client.alertOperations.listRules(resourceGroup, targetResourceId, __cb(_, __frame, 7, 42, function ___(__0, __1) { response = __1;

                  log.silly((!response ? util.inspect(response) : "nothing in response"));
                  log.silly(((!response && response.ruleResourceCollection) ? util.inspect(response.ruleResourceCollection) : "nothing in ruleResourceCollection"));

                  __.each(response.ruleResourceCollection.value, function(element) { result.push(element); }); __then(); }, true)); } else {

                log.silly("Query by name");
                return client.alertOperations.getRule(resourceGroup, name, __cb(_, __frame, 15, 42, function ___(__0, __2) { response = __2;

                  log.silly((!response ? util.inspect(response) : "nothing in response"));

                  result.push({
                    id: response.id,
                    location: response.location,
                    name: response.name,
                    properties: response.properties,
                    tags: response.Tags }); __then(); }, true)); } ; })(function __$insightsAlertsRulesCommand__executeCmd__7() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$insightsAlertsRulesCommand__executeCmd__7() {



              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$insightsAlertsRulesCommand__executeCmd__7() {


          insightsUtils.formatOutputList(cli, log, options, result); _(); }); }); }); };


  insightsAlertsRulesCommand._executeDeleteCmd = function insightsAlertsRulesCommand__executeDeleteCmd__8(client, resourceGroup, ruleName, options, _) { var progress, response; var __frame = { name: "insightsAlertsRulesCommand__executeDeleteCmd__8", line: 355 }; return __func(_, this, arguments, insightsAlertsRulesCommand__executeDeleteCmd__8, 4, __frame, function __$insightsAlertsRulesCommand__executeDeleteCmd__8() {
      progress = cli.interaction.progress(util.format($("Deleting alert rule \"%s\""), ruleName));
      response = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$insightsAlertsRulesCommand__executeDeleteCmd__8() {

            return client.alertOperations.deleteRule(resourceGroup, ruleName, __cb(_, __frame, 4, 40, function ___(__0, __1) { response = __1;


              log.silly((!response ? util.inspect(response) : "nothing in response")); _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$insightsAlertsRulesCommand__executeDeleteCmd__8() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$insightsAlertsRulesCommand__executeDeleteCmd__8() {


          insightsUtils.formatOutput(cli, log, options, response); _(); }); }); }); };


  insightsAlertsRulesCommand._executeSetCmd = function insightsAlertsRulesCommand__executeSetCmd__9(client, ruleName, resourceGroup, parameters, options, _) { var progress, response; var __frame = { name: "insightsAlertsRulesCommand__executeSetCmd__9", line: 370 }; return __func(_, this, arguments, insightsAlertsRulesCommand__executeSetCmd__9, 5, __frame, function __$insightsAlertsRulesCommand__executeSetCmd__9() {
      progress = cli.interaction.progress(util.format($("Setting or creating alert rule \"%s\""), ruleName));
      response = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$insightsAlertsRulesCommand__executeSetCmd__9() {

            return client.alertOperations.createOrUpdateRule(resourceGroup, parameters, __cb(_, __frame, 4, 40, function ___(__0, __1) { response = __1;


              log.silly((!response ? util.inspect(response) : "nothing in response")); _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$insightsAlertsRulesCommand__executeSetCmd__9() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$insightsAlertsRulesCommand__executeSetCmd__9() {


          insightsUtils.formatOutput(cli, log, options, response); _(); }); }); }); };};
