/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var adUtils = require("./adUtils");

















var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;

  var ad = cli.category("ad").description($("Commands to display active directory objects"));

  var adGroup = ad.category("group").description($("Commands to display active directory groups"));


  adGroup.command("list").description($("Get active directory groups in current subscription's tenant")).option("| more", $("Provides paging support. Press 'Enter' for more information.")).execute(function __1(objectId, options, _) { var subscription, client, progress; var __frame = { name: "__1", line: 35 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {



      subscription = profile.current.getSubscription(options.subscription);
      client = adUtils.getADGraphClient(subscription);
      progress = cli.interaction.progress($("Listing active directory groups")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

            return adUtils.listGraphObjects(client, "group", cli.interaction, log, __cb(_, __frame, 5, 16, function __$__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() { _(); }); }); }); });



  adGroup.command("show").description($("Get active directory groups")).option("--objectId <objectId>", $("the object Id of the group to return")).option("--search <search>", $("Search by display name which starts with the provided value")).execute(function __2(options, _) { var objectId, search, subscription, client, progress, groups; var __frame = { name: "__2", line: 50 }; return __func(_, this, arguments, __2, 1, __frame, function __$__2() {




      objectId = options.objectId;
      search = options.search;

      adUtils.validateParameters({
        objectId: objectId,
        search: search });


      subscription = profile.current.getSubscription(options.subscription);
      client = adUtils.getADGraphClient(subscription);
      progress = cli.interaction.progress($("Getting group list")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {



            return getSpecificGroups(client, objectId, search, __cb(_, __frame, 15, 17, function ___(__0, __1) { groups = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


          if ((groups.length > 0)) {
            adUtils.displayGroups(groups, cli.interaction, log); }
           else {
            log.data($("No matching group was found")); } ; _(); }); }); }); });



  var adGroupMember = adGroup.category("member").description($("Commands to provide an active directory sub group or member info"));


  adGroupMember.command("list [objectId]").description($("Provides an active directory sub group or member info")).option("--objectId <objectId>", $("Object id of group whose members to return.")).execute(function __3(objectId, options, _) { var subscription, client, progress; var __frame = { name: "__3", line: 83 }; return __func(_, this, arguments, __3, 2, __frame, function __$__3() {



      if (!objectId) {
        return _(null, cli.missingArgument("objectId")); } ;

      subscription = profile.current.getSubscription(options.subscription);
      client = adUtils.getADGraphClient(subscription);

      progress = cli.interaction.progress($("Getting group members")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {

            return adUtils.listGroupMembers(client, objectId, cli.interaction, log, __cb(_, __frame, 9, 16, function __$__3() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() { _(); }); }); }); });};




function getSpecificGroups(client, objectId, search, _) { var group; var __frame = { name: "getSpecificGroups", line: 99 }; return __func(_, this, arguments, getSpecificGroups, 3, __frame, function __$getSpecificGroups() { return (function __$getSpecificGroups(__then) {
      if (search) {
        return client.group.list(null, search, __cb(_, __frame, 2, 24, function ___(__0, __2) { var __1 = __2.groups; return _(null, __1); }, true)); } else {

        return client.group.get(objectId, __cb(_, __frame, 4, 29, function ___(__0, __3) { group = __3.group;
          return _(null, (group ? [group,] : [])); }, true)); } ; })(_); });};
