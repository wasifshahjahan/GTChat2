/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var adUtils = require("./adUtils");
















var profile = require("../../../util/profile");
var utils = require("../../../util/utils");
var util = require("util");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;
  var withProgress = cli.interaction.withProgress.bind(cli.interaction);

  var ad = cli.category("ad").description($("Commands to display active directory objects"));

  var adSP = ad.category("sp").description($("Commands to display active directory service principals"));


  adSP.command("list").description($("Get all active directory service principals in current subscription's tenant")).option("| more", $("Provides paging support. Press 'Enter' for more information.")).execute(function __1(options, _) { var subscription, client, progress; var __frame = { name: "__1", line: 36 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {



      subscription = profile.current.getSubscription(options.subscription);
      client = adUtils.getADGraphClient(subscription);
      progress = cli.interaction.progress($("Listing active directory service principals")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

            return adUtils.listGraphObjects(client, "servicePrincipal", cli.interaction, log, __cb(_, __frame, 5, 16, function __$__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() { _(); }); }); }); });



  adSP.command("show").description($("Get active directory service principals")).option("--spn <spn>", $("the name of the service principal to return")).option("--objectId <objectId>", $("the object id of the service principal to return")).option("--search <search>", $("search display name of the service principal starting with the provided value")).execute(function __2(options, _) { var spn, objectId, search, subscription, client, progress, servicePrincipals, servicePrincipal; var __frame = { name: "__2", line: 52 }; return __func(_, this, arguments, __2, 1, __frame, function __$__2() {





      spn = options.spn;
      objectId = options.objectId;
      search = options.search;

      adUtils.validateParameters({
        spn: spn,
        objectId: objectId,
        search: search });

      subscription = profile.current.getSubscription(options.subscription);
      client = adUtils.getADGraphClient(subscription);
      progress = cli.interaction.progress($("Getting active directory service principals"));
      servicePrincipals = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function __$__2(__then) {

              if (spn) {
                return client.servicePrincipal.getByServicePrincipalName(spn, __cb(_, __frame, 16, 54, function ___(__0, __1) { servicePrincipals = __1.servicePrincipals; __then(); }, true)); } else { return (function __$__2(__then) {
                  if (objectId) {
                    return client.servicePrincipal.get(objectId, __cb(_, __frame, 18, 57, function ___(__0, __2) { servicePrincipal = __2.servicePrincipal;
                      if (servicePrincipal) {
                        servicePrincipals.push(servicePrincipal); } ; __then(); }, true)); } else {


                    return client.servicePrincipal.list(search, __cb(_, __frame, 23, 54, function ___(__0, __3) { servicePrincipals = __3.servicePrincipals; __then(); }, true)); } ; })(__then); } ; })(function __$__2() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


          if ((servicePrincipals.length > 0)) {
            adUtils.displayServicePrincipals(servicePrincipals, cli.interaction, log); }
           else {
            log.data($("No matching service principal was found")); } ; _(); }); }); }); });



  adSP.command("create [applicationId]").description($("Create active directory service principal")).usage("[options] <applicationId>").option("--applicationId <applicationId>", $("the application Id for which service principal is created")).execute(function __3(applicationId, options, _) { var subscription, client, spParams, servicePrincipal; var __frame = { name: "__3", line: 92 }; return __func(_, this, arguments, __3, 2, __frame, function __$__3() {




      if (!applicationId) {
        return _(null, cli.missingArgument("applicationId")); } ;


      subscription = profile.current.getSubscription(options.subscription);
      client = adUtils.getADGraphClient(subscription);

      spParams = {
        accountEnabled: true,
        appId: applicationId };


      return withProgress(util.format($("Creating service principal for application %s"), applicationId), function __1(log, _) { var __frame = { name: "__1", line: 106 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {

          return client.servicePrincipal.create(spParams, __cb(_, __frame, 1, 39, function ___(__0, __2) { var __1 = __2.servicePrincipal; return _(null, __1); }, true)); }); }, __cb(_, __frame, 13, 29, function ___(__0, __2) { servicePrincipal = __2;


        cli.interaction.formatOutput(servicePrincipal, function(data) {
          if (data) {
            adUtils.displayAServicePrincipal(data, log); } ; }); _(); }, true)); }); });




  adSP.command("delete [objectId]").description($("Deletes active directory service principal")).usage("[options] <objectId>").option("--objectId <objectId>", $("the object id of the service principal to delete")).option("-q, --quiet", $("quiet mode (do not ask for delete confirmation)")).execute(function __4(objectId, options, _) { var subscription, client, progress; var __frame = { name: "__4", line: 122 }; return __func(_, this, arguments, __4, 2, __frame, function __$__4() {





      if (!objectId) {
        return _(null, cli.missingArgument("objectId")); } ; return (function __$__4(_) {


        var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete service principal %s? [y/n] "), objectId), __cb(_, __frame, 5, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -121, 17, function ___(__0, __2) { return (function __$__4(__then) { if (__2) { return _(null); } else { __then(); } ; })(function __$__4() {



          subscription = profile.current.getSubscription(options.subscription);
          client = adUtils.getADGraphClient(subscription);
          progress = cli.interaction.progress(util.format($("Deleting service principal %s"), objectId)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {

                return client.servicePrincipal.deleteMethod(objectId, __cb(_, __frame, 13, 32, function __$__4() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() { _(); }); }); }); }, true)); }); });};
