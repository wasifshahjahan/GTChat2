/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var adUtils = require("./adUtils");
















var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;

  var ad = cli.category("ad").description($("Commands to display active directory objects"));

  var adUser = ad.category("user").description($("Commands to display active directory users"));


  adUser.command("list").description($("Get all active directory users in current subscription's tenant")).option("| more", $("Provides paging support. Press 'Enter' for more information.")).execute(function __1(options, _) { var subscription, client, progress; var __frame = { name: "__1", line: 34 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {



      subscription = profile.current.getSubscription(options.subscription);
      client = adUtils.getADGraphClient(subscription);
      progress = cli.interaction.progress($("Listing active directory users")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {

            return adUtils.listGraphObjects(client, "user", cli.interaction, log, __cb(_, __frame, 5, 16, function __$__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() { _(); }); }); }); });



  adUser.command("show").description($("Get an active directory user")).option("--upn <upn>", $("the principal name of the user to return")).option("--objectId <objectId>", $("the object id of the user to return")).option("--search <search>", $("search users with display name starting with the provided value")).execute(function __2(options, _) { var upn, objectId, search, subscription, client, progress, users, user; var __frame = { name: "__2", line: 50 }; return __func(_, this, arguments, __2, 1, __frame, function __$__2() {





      upn = options.upn;
      objectId = options.objectId;
      search = options.search;

      adUtils.validateParameters({
        upn: upn,
        objectId: objectId,
        search: search });

      subscription = profile.current.getSubscription(options.subscription);
      client = adUtils.getADGraphClient(subscription);
      progress = cli.interaction.progress($("Getting active directory user"));
      users = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function __$__2(__then) {

              if (upn) {
                return client.user.getBySignInName(upn, __cb(_, __frame, 16, 30, function ___(__0, __1) { users = __1.users; __then(); }, true)); } else { return (function __$__2(__then) {
                  if (objectId) {
                    return client.user.get(objectId, __cb(_, __frame, 18, 33, function ___(__0, __2) { user = __2.user;
                      if (user) {
                        users.push(user); } ; __then(); }, true)); } else {


                    return client.user.list(null, search, __cb(_, __frame, 23, 30, function ___(__0, __3) { users = __3.users; __then(); }, true)); } ; })(__then); } ; })(function __$__2() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


          if ((users.length > 0)) {
            adUtils.displayUsers(users, cli.interaction, log); }
           else {
            log.error($("No matching user was found")); } ; _(); }); }); }); });};
