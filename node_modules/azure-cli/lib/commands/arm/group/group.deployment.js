/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var util = require("util");


















var profile = require("../../../util/profile");
var utils = require("../../../util/utils");

var groupUtils = require("./groupUtils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;

  var group = cli.category("group");
  var deployment = group.category("deployment").description($("Commands to manage your deployment in a resource group"));


  deployment.command("create [resource-group] [name]").description($("Creates a deployment")).option("-g --resource-group <resource-group>", $("the name of the resource group")).option("-n --name <name>", $("the name of the deployment")).fileRelatedOption("-f --template-file <template-file>", $("the path to the template file in the file system")).option("--template-uri <template-uri>", $("the uri to the remote template file")).option("--template-version <template-version>", $("the content version of the template")).option("-p --parameters <parameters>", $("a JSON-formatted string containing parameters")).fileRelatedOption("-e --parameters-file <parametersFile>", $("a file containing parameters")).option("-m --mode <mode>", $("the deployment mode: specify one of Incremental or Complete. If no mode is specified, Incremental is used as default. When Complete mode is used, all the resources in the specified resource group, which are not included in the template, will be deleted.")).option("-q --quiet", $("quiet mode (when complete mode is specified, do not ask for deployment confirmation)")).option("--nowait", $("does not wait for the deployment to complete. Returns as soon as the deployment is created")).option("--novalidate", $("do not validate deployment")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, name, options, _) { var deployment, subscription, client; var __frame = { name: "__1", line: 48 }; return __func(_, this, arguments, __1, 3, __frame, function __$__1() {














      if (!resourceGroup) {
        return _(null, cli.missingArgument("resourceGroup")); } ;


      if (((options.mode && !utils.ignoreCaseEquals(options.mode, "complete")) && !utils.ignoreCaseEquals(options.mode, "incremental"))) {
        return _(new Error("Please provide a valid deployment mode: Complete or Incremental.")); } ; return (function __$__1(_) {


        var __2 = (!options.quiet && utils.ignoreCaseEquals(options.mode, "complete")); if (!__2) { return _(null, __2); } ;
        return cli.interaction.confirm(util.format($("Are you sure you want to use the Complete deployment mode? Resources in resource group %s, which are not included in the template will be deleted. [y/n] "), resourceGroup), __cb(_, __frame, 10, 25, function ___(__0, __4) { var __3 = !__4; return _(null, __3); }, true)); })(__cb(_, __frame, -47, 17, function ___(__0, __3) { return (function __$__1(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$__1() {



          return groupUtils.createDeployment(cli, resourceGroup, name, options, __cb(_, __frame, 14, 34, function ___(__0, __4) { deployment = __4;
            subscription = profile.current.getSubscription(options.subscription);
            client = utils.createResourceClient(subscription); return (function __$__1(__then) {

              if (!options.nowait) {
                return cli.interaction.withProgress($("Waiting for deployment to complete"), function __1(log, _) { var failedOperations; var __frame = { name: "__1", line: 68 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() { var __1 = true; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$__1() { __more = false;




                        var __4 = (__1 || ((deployment.properties.provisioningState === "Running") || (deployment.properties.provisioningState === "Accepted"))); if (__4) { __1 = false; return client.deployments.get(resourceGroup, deployment.name, __cb(_, __frame, 2, 44, function ___(__0, __2) { deployment = __2; return setTimeout(__cb(_, __frame, 3, 12, function __$__1() { while (__more) { __loop(); }; __more = true; }, true), 5000); }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$__1() { return (function __$__1(__then) {

                        if ((deployment.properties.provisioningState !== "Succeeded")) {
                          log.error("Deployment provisioning state was not successful");


                          return groupUtils.getFailedDeploymentOperations(options.subscription, resourceGroup, deployment.name, __cb(_, __frame, 10, 46, function ___(__0, __3) { failedOperations = __3;

                            failedOperations.forEach(function(operation) {
                              if (operation.properties.statusMessage.error) {
                                log.error(operation.properties.statusMessage.error.message);

                                if (operation.properties.statusMessage.error.details) {
                                  operation.properties.statusMessage.error.details.forEach(function(detail) {
                                    if (detail.message) {
                                      log.error(detail.message); } ;

                                    if (detail.details) {
                                      detail.details.forEach(function(innerDetail) {
                                        if (innerDetail.message) {
                                          log.error(innerDetail.message); } ; }); } ; }); } ; } ; }); __then(); }, true)); } else { __then(); } ; })(_); }); }); }, __cb(_, __frame, 19, 24, __then, true)); } else { __then(); } ; })(function __$__1() {












              if (deployment) {
                cli.interaction.formatOutput(deployment, function(data) {
                  if (data) {
                    displayDeployment(data, resourceGroup, true, log); } ; }); } ; _(); }); }, true)); }); }, true)); }); });





  deployment.command("list [resource-group] [state]").usage("[options] <resource-group> [state]").description($("Gets deployments")).option("-g --resource-group <resourceGroup>", $("the name of the resource group.")).option("--state <state>", $(("filter the deployments by provisioning state (valid " + "values are Accepted, Running, Failed, and Succeeded)"))).option("--subscription <subscription>", $("subscription containing deployments to list (optional)")).execute(function __2(resourceGroup, state, options, _) { var subscription, client, progress, allDeployments; var __frame = { name: "__2", line: 121 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {







      if (!resourceGroup) {
        return _(null, cli.missingArgument("resourceGroup")); } ;

      subscription = profile.current.getSubscription(options.subscription);
      client = utils.createResourceClient(subscription);
      progress = cli.interaction.progress($("Listing deployments")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {


            return retrieveDeployments(client, resourceGroup, state, __cb(_, __frame, 9, 25, function ___(__0, __1) { allDeployments = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


          cli.interaction.formatOutput(allDeployments, function(outputData) {
            if (outputData) {
              for (var i = 0; (i < outputData.length); i++) {
                var deployment = outputData[i];
                displayDeployment(deployment, resourceGroup, false, log);
                if ((i !== (outputData.length - 1))) {

                  log.data($("")); } ; }; } ; }); _(); }); }); }); });






  deployment.command("show [resource-group] [name]").usage("[options] <resource-group> [deployment-name]").description($("Shows a deployment")).option("-g --resource-group <resourceGroup>", $("the name of the resource group.")).option("-n --name <name>", $("the name of the deployment (if not specified, the most recent deployment is shown)")).option("--subscription <subscription>", $("subscription containing the deployment to display (optional)")).execute(function __3(resourceGroup, name, options, _) { var subscription, client, progress, deployment, allDeployments; var __frame = { name: "__3", line: 155 }; return __func(_, this, arguments, __3, 3, __frame, function __$__3() {






      if (!resourceGroup) {
        return _(null, cli.missingArgument("resourceGroup")); } ;

      subscription = profile.current.getSubscription(options.subscription);
      client = utils.createResourceClient(subscription);
      progress = cli.interaction.progress($("Getting deployments")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function __$__3(__then) {


              if (name) {
                return client.deployments.get(resourceGroup, name, __cb(_, __frame, 10, 42, function ___(__0, __1) { deployment = __1; __then(); }, true)); } else {



                return retrieveDeployments(client, resourceGroup, "", __cb(_, __frame, 14, 31, function ___(__0, __2) { allDeployments = __2;
                  if ((allDeployments && (allDeployments.length > 0))) {
                    allDeployments.sort(function(a, b) {
                      return (Date.parse(a.properties.timestamp) < Date.parse(b.properties.timestamp)); });

                    deployment = allDeployments[0]; } ; __then(); }, true)); } ; })(function __$__3() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {



              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


          if (deployment) {
            cli.interaction.formatOutput(deployment, function(data) {
              if (data) {
                displayDeployment(data, resourceGroup, true, log); } ; }); } ; _(); }); }); }); });





  deployment.command("stop [resource-group] [name]").usage("[options] <resource-group> [deployment-name]").description($("Stops a deployment")).option("-g --resource-group <resourceGroup>", $("the name of the resource group")).option("-q --quiet", $("quiet mode (do not ask for stop deployment confirmation)")).option("-n --name <name>", $("the name of the deployment (if not specified, the currently running deployment is stopped)")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, name, options, _) { var subscription, client, deploymentToStop, progress; var __frame = { name: "__4", line: 197 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {







      if (!resourceGroup) {
        return _(null, cli.missingArgument("resourceGroup")); } ;

      subscription = profile.current.getSubscription(options.subscription);
      client = utils.createResourceClient(subscription);
      deploymentToStop = name; return (function __$__4(__then) {

        if (!name) {
          return cli.interaction.withProgress($("Looking for \"Running\" or \"Accepted\" deployment"), function __1(log, _) { var allAcceptedDeployments, allRunningDeployments, allCancellableDeployments; var __frame = { name: "__1", line: 207 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {



              return retrieveDeployments(client, resourceGroup, "Accepted", __cb(_, __frame, 3, 41, function ___(__0, __1) { allAcceptedDeployments = __1;
                return retrieveDeployments(client, resourceGroup, "Running", __cb(_, __frame, 4, 40, function ___(__0, __2) { allRunningDeployments = __2;
                  allCancellableDeployments = allAcceptedDeployments;
                  if (!allCancellableDeployments) {
                    allCancellableDeployments = allRunningDeployments; }
                   else {
                    allCancellableDeployments = allCancellableDeployments.concat(allRunningDeployments); } ;


                  if ((allCancellableDeployments && (allCancellableDeployments.length > 0))) {
                    if ((allCancellableDeployments.length > 1)) {
                      return _(new Error($("There are more than 1 deployment in either \"Running\" or \"Accepted\" state, please name one."))); } ;

                    deploymentToStop = allCancellableDeployments[0].name;
                    log.info(util.format($("Found a deployment: %s"), deploymentToStop)); }

                   else {
                    log.info($("There is no deployment to stop.")); } ; _(); }, true)); }, true)); }); }, __cb(_, __frame, 9, 24, __then, true)); } else { __then(); } ; })(function __$__4() { return (function __$__4(__then) {




          if (deploymentToStop) { return (function __$__4(_) {
              var __2 = !options.quiet; if (!__2) { return _(null, __2); } ;
              return cli.interaction.confirm(util.format($("Stop deployment %s? [y/n]: "), deploymentToStop), __cb(_, __frame, 37, 29, function ___(__0, __4) { var __3 = !__4; return _(null, __3); }, true)); })(__cb(_, __frame, -196, 17, function ___(__0, __3) { return (function __$__4(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$__4() {



                progress = cli.interaction.progress($("Stopping deployment")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {


                      return client.deployments.cancel(resourceGroup, deploymentToStop, __cb(_, __frame, 44, 29, function __$__4() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {

                        progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, __then); }); }); }, true)); } else { __then(); } ; })(_); }); }); });




  deployment.command("delete [resource-group] [name]").usage("[options] <resource-group> <deployment-name>").description($("Deletes a deployment")).option("-g --resource-group <resourceGroup>", $("the name of the resource group.")).option("-n --name <name>", $("the name of the deployment.")).option("-q, --quiet", $("quiet mode (do not ask for delete confirmation)")).option("--subscription <subscription>", $("subscription containing the deployment to display (optional)")).execute(function __5(resourceGroup, name, options, _) { var subscription, client, progress; var __frame = { name: "__5", line: 255 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {







      if (!resourceGroup) {
        return _(null, cli.missingArgument("resourceGroup")); } ;

      if (!name) {
        return _(null, cli.missingArgument("name")); } ; return (function __$__5(_) {

        var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete deployment %s? [y/n] "), name), __cb(_, __frame, 7, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -254, 17, function ___(__0, __2) { return (function __$__5(__then) { if (__2) { return _(null); } else { __then(); } ; })(function __$__5() {


          subscription = profile.current.getSubscription(options.subscription);
          client = utils.createResourceClient(subscription); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() {

                return client.deployments.checkExistence(resourceGroup, name, __cb(_, __frame, 13, 27, __then, true)); }); })(function ___(err, __result) { __catch(function __$__5() { if (err) {


                  return _(new Error($("The deployment does not exist."))); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__5() {


              progress = cli.interaction.progress($("Deleting deployment")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() {

                    return client.deployments.deleteMethod(resourceGroup, name, __cb(_, __frame, 21, 27, function __$__5() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {


                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() { _(); }); }); }); }); }); }, true)); }); });};




function retrieveDeployments(client, resourceGroup, state, _) { var parameters, response, allDeployments, nextLink; var __frame = { name: "retrieveDeployments", line: 284 }; return __func(_, this, arguments, retrieveDeployments, 3, __frame, function __$retrieveDeployments() {
    parameters = { };
    if (state) {
      parameters.filter = (("provisioningState eq '" + state) + "'"); } ;

    return client.deployments.list(resourceGroup, parameters, __cb(_, __frame, 5, 36, function ___(__0, __1) { response = __1;
      allDeployments = response;
      nextLink = response.nextLink; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$retrieveDeployments() { __more = false;

          var __4 = nextLink; if (__4) {
            return client.deployments.listNext(nextLink, __cb(_, __frame, 10, 34, function ___(__0, __2) { response = __2;
              allDeployments = allDeployments.concat(response);
              nextLink = response.nextLink; while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$retrieveDeployments() {


        return _(null, allDeployments); }); }, true)); });};


function displayDeployment(deployment, resourceGroup, showDetail, log) {
  log.data($("DeploymentName     :"), (deployment.name || deployment.deploymentName));
  log.data($("ResourceGroupName  :"), resourceGroup);
  log.data($("ProvisioningState  :"), deployment.properties.provisioningState);
  log.data($("Timestamp          :"), deployment.properties.timestamp);
  log.data($("Mode               :"), deployment.properties.mode);
  log.data($("CorrelationId      :"), deployment.properties.correlationId);
  if (showDetail) {
    if (deployment.properties.templateLink) {
      log.data($("TemplateLink       :"), deployment.properties.templateLink.uri);
      log.data($("ContentVersion     :"), deployment.properties.templateLink.contentVersion); } ;

    if ((deployment.properties.parameters && (Object.keys(deployment.properties.parameters).length > 0))) {
      log.data($("DeploymentParameters :"));
      log.table(deployment.properties.parameters, function(row, item) {
        row.cell($("Name"), item);
        row.cell($("Type"), deployment.properties.parameters[item].type);
        row.cell($("Value"), deployment.properties.parameters[item].value); }); } ; } ;



  if ((deployment.properties.outputs && (Object.keys(deployment.properties.outputs).length > 0))) {
    log.data($("Outputs            :"));
    log.table(deployment.properties.outputs, function(row, item) {
      row.cell($("Name"), item);
      row.cell($("Type"), deployment.properties.outputs[item].type);
      row.cell($("Value"), deployment.properties.outputs[item].value); }); } ;};
